Парсинг пейлоада (POST/users)

Следующий шаг - получить данные формы на сервере и как-то их обработать.
Этап состоит из нескольких шагов.

1. Получить POST-данные (это может происходить по-разному в зависимости от того, 
используешь ли ты фреймворк и какой конкретно, если используешь)
2. Распарсить POST-данные через наш инстанс формы.
3. Проверить (валидировать) корректность заполнения. Если что-то не так, вернуть ошибки.
4. Заполнить данными формы требуемый объект. Это опционально, но, если ты пользуешься
ORM, велика вероятность, что по данным формы тебе нужно создать объект  БД.
В нашем случае это пользователь, объекь класса User.

async def create(self, request):
	#Получаем payload. Для aiohttp это не самый оптимальный.
	#Способ для больших payload. Взят для краткости
	payload = await request.post()

	#Создаем новый инстанс нашей формы и заполняем его данными,
	#пришедшими с клиентами
	form = UserForm(payload)

	#Если данные с клиента проходят валидацию
	if form.validate():
		#Создаем ноый объект user
		user = User()
		
		#Заполняем его атрибуты данными формы
		form.populate_obj(user)

		#...
		#Сохраняем юзера в БД, редиректим дальше...

Мы отрендирили формы, получили данные с клиента обратно, проверили их и записали в БД.
При этом мы не погружались во внутренности HTML, ID полей, имена и их сопоставления 
на клиенте и сервере. Не правда ли, удобно?