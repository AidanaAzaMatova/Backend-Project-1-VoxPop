Идеальная форма. Обрабатываем сложные формы на Python с помощью WTForms.

Обработка HTML-форм в веб-приложениях - несложная задача. Казалось бы, о чем говорить:
набросал форму в шаблоне, создал обработчики на сервере - и готово. Проблемы начинаются, 
когда форма разрастается: нужно следить за полями, их ID, атрибутами name, корректно маппить
атрибуты на бэкенде при генерации и процессинге данных. А если часть формы нужно еще и
использовать поторно, то разработка превращаеттся в постоянную рутину: приходится бесконечно
копировать атрибуты тегов с клиента на сервер и копипастить однотипный код. Однако есть
способы сделать работу с формами удобной.

Зачем это нужно?

Чтобы понять, какую проблему мы решаем, давай взгляем на простой пример.
Представь, что в нашем веб-приложении есть форма для создания пользователей.
<form action ="">
<!-- personal info -->
<input type = 'text' id = 'f_name' name = 'f_name' placeholder = 'John' />
<input type = 'text' id = 'l_name' name = 'l_name' placeholder = 'Dow' />

<!-- account info -->
<input type ='email' id='email' name='email' placeholder=john@example.com'/>
<input type='password' id='password' name='password' placeholder'***********'>/>

<!--meta info-->
<select name='gender' id='gender'>
	<option value='0'>Male</option>
	<option value='1' selected>Female</option>
</select>
<input type='city' id='city' name='city' placeholder='Saint-Petersburg'/>
<textarea name='signature' id=signature' cols='30' rows='10'></textarea>
<input type='submit' value='Create user!'/>
</form>

Это форма выглядит просто. Однако использование в релаьном приложении добавить ряд задач.
1. У каждого поля (или в одном блоке) нужно вывести информацию об ошибках,
которые могут появиться при валидации формы.

2. Сокрее всего, для некоторых полей мы захотим иметь подсказки.

3. Наверняка нам нужно будет повесить по подном или CSS-классов на каждое поле или даже
делать это динамически.

4. Часть полей должна содержать предварительно заполненные данные с бэкенда -
предыдущие попытки сабмита формы или данные для выпадающих списков. Честный случай с полем 
gender прост, однако опции для селекта могут формироваться запросами к БД.

И так далее. Все эти доделки раздуют нашу форму как минимум вдвое.

А теперь посмотрим на то, как мы будем обрабатывать эту форму на сервере.

Для каждого поля мы должны сделать следующее.

1. Корректно смаппить его по name.
2. Проверить диапазон допустимых значений - валидировать форму.
3. Если были ошибки, сохранятьих, вернув форму для редактирования назад на клиентскую часть.
4. Если все ОК, то смаппить их на объект БД или аналогичную по свойствам структуру для
дальнейшего процессинга.

Вдобавок при создании пользователя тебе, как админу, нужно заполнять только часть данных 
email and password, остальное пользователь заполнит сам в профиле.
В этом случае тебе, скорее всего, придется скопировать шаблон, удалив часть полей,
создать идентичный обработчик формы на сервере или вставлять проверки в текущей для
различных вариантов формы. Логику валидации полей придется или копировать, или выносить
в отдельную функцию. При этом нужно не запутаться в названиях полей, приходящих с клиента,
иначе данные просто потеряются.

Но пользователей нужно не только создавать, но и редактировать, используя ту же самую форму!
Причем у админа и юзера эти формы будут разные, с частично пересекающимся набором полей.

Все эти требования резко увеличивают количество наблонов, обработчиков, ввалидаторов,
которые в лучшем случае будут вынесены в общий модуль, а скорее всего, будут копипаститься по 
быстрому. И при необходимости изменить одно поле в форме придется перелопатить
все приложение, отлавливая ошибки и оечатки.

Было бы удобнее описать форму в каком-то дкуларатином формате, например в виде Python-класса,
одноразово описав все параметры, классы, валидаторы, обработчики, а заодно предусмотрев
возможности ее наследования и расширения. Вот тут-то нам и поможет библиотека
WTForms (https://wtforms.readthedocs.io/en/stable/).

Если ты использовал крупные фремворки типа Django или Rails, ты уже сталкивался со схожей 
функциональностью в том или ином виде. Однаков не для каждой задачи требуется огромный Django.
Применять WTForms удобно в паре с легковемными микрофрейворками или в узкоспециализированных приложениях
с необходимостью обрабатывать веб-формы, где использваоние Django неоправданно.
