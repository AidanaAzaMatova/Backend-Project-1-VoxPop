¬от, что мы сделали.

1. —оздали класс UserForm дл€ дальнейшей формы. ќн наследован от встроенного Form (and BaseForm)

2.  аждое из полей формы описали атрибутом класса, присвоив объект встроенного в либу
класса типа Field.

¬ большинстве полей формы мы использовали импортированный класс StringField.
 ак нетрудно догадатьс€, поле gender требует ввода другого типа - ограниченного
набора значений (м/ж), поэтому мы использовали SelectField.ѕодпись пользовател€
тоже лучше принимать не в обычном input, а в textarea, поэтому мы использовали TextAreaField, 
чье HTML-представление (виджет) - тег  <textarea></textarea>. ≈сли бы нам нужно было 
обрабатывать числовое значение, мы бы импортировали встроенный класс IntegerField
и описали бы поле им.

¬ WTForms множество встроенных классов дл€ описани€ полей, посмотреть все можно здесь
(https://wtforms.readthedocs.io/en/stable/fields/#basic-fields). “акже можно создать
поле кастомного класса.

ќ пол€х нужно знать следующее.
- аждое поле может принимать набор инструментов, общий дл€ всех типов полей.
-ѕочти каждое поле имеет HTML-представлени€, так называемый виджет.
-ƒл€ каждого пол€ можно указать набор валидаторов.
-Ќекоторые пол€ могут принимать дополнительные аргументы. Ќапример, дл€ SelectField можно
указать набор возможных значений.
-ѕол€ можно добавл€ть к уже существующим формам. » можно модифициро≠
вать, измен€ть значени€ на лету. Ёто особенно полезно, когда нужно чуть изме≠
нить поведение формы дл€ одного конкретного случа€, при этом не создавать
новый класс формы.
-ѕол€ могуг провоцировать ошибки валидации по заданным правилам, они будуг
хранитьс€ в form. field. errors. 